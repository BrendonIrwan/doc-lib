Media Compression Manual u1r0 by Brendon, 06/10/2021.

0   0   0   1   "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQ   6   7   7   8
1   5   9   3   RSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~!—    8   2   6   0


——Preface
Despite the advancements in data storage solutions, data is still compressed
today to save bandwidth and storage spaces.

Uncompressed media files are huge. An hour of CD-quality audio measures about
606 MiB large, and a minute of DVD-quality video can take well over 1 GiB.

Because of this, media and especially video compression has been commonplace
since the 1980s. In 1993, we were blessed with Video CD which uses MPEG-1
compression to fit over an hour of video on a single disc. Then in 1997 or so,
DVD-Video was released to the market. It uses MPEG-2 compression to fit hours of
video on a single disc.

This manual documents at least some of my knowledge about media compression. You
don't have to follow its recommendations, but take them as starting points to
your liking.


——TOC: Contents
With the find/search function of your viewer, you can jump to a section by its
label followed by a colon ':'. For example, use "TOC:" to return here.

Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [TOC]
Data Compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A00]
  - Lossless . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A01]
  - Lossy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A02]
— Compression Level  . . . . . . . . . . . . . . . . . . . . . . . . . . . [A10]
— Rate Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A20]
  - Constant Bitrate . . . . . . . . . . . . . . . . . . . . . . . . . . . [A21]
  - Variable Bitrate . . . . . . . . . . . . . . . . . . . . . . . . . . . [A22]
Audio Compression  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B00]
— Opus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B10]
— Vorbis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B20]
— Advanced Audio Coding (AAC)  . . . . . . . . . . . . . . . . . . . . . . [B30]
— MPEG-1/2 Audio Layer III (MP3) . . . . . . . . . . . . . . . . . . . . . [B40]
— Windows Media Audio (WMA)  . . . . . . . . . . . . . . . . . . . . . . . [B50]
— Adaptive Transform Acoustic Coding (ATRAC) . . . . . . . . . . . . . . . [B60]
— Audio Recording  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B70]
Video Compression  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C00]
— Advanced Video Coding (AVC/H.264)  . . . . . . . . . . . . . . . . . . . [C10]
— MPEG-4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C20]
— Theora . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C30]
— VP8  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C40]
— H.265, VP9, and AV1  . . . . . . . . . . . . . . . . . . . . . . . . . . [C50]
— Chroma Subsampling . . . . . . . . . . . . . . . . . . . . . . . . . . . [C60]
— Video Recording  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C70]
Image Compression  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [D00]
— When To Use Lossy Compression? . . . . . . . . . . . . . . . . . . . . . [D10]
— JPEG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [D20]
— Portable Network Graphics (PNG)  . . . . . . . . . . . . . . . . . . . . [D30]
— Graphics Interchange Format (GIF)  . . . . . . . . . . . . . . . . . . . [D40]
— WebP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [D50]
Media Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E00]
— Audio Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . [E10]
  - Sampling Rate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E11]
  - Bitdepth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E12]
  - Channels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E13]
— Image Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . [E20]
  - Colors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E21]
  - Resolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E22]
— Video Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . [E30]
Credits  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [CRD]
License  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [LCN]


——A00: Data Compression
Data compression involves encoding a stream of data with less bits than its
original representation. For example, consider the following number sequence and
its reduced representation:

  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ->  1 seventeen times.

Here's another example:

  Imagine a video clip of a slideshow of still images, in which each slide spans
  for five seconds. As such, this clip contains duplicate frames, and memorizing
  them is inefficient. One technique is to have each unique frame memorized once
  and flagged to be shown for five seconds.

There are a lot more behind the magic than those two examples have shown.

There are two classes of compression algorithms: lossless and lossy.

---—A01: Lossless
Lossless algorithms allows a verbatim reconstruction of data, such that the
original and decompressed data have to be congruent. Applications that require
this include document files.

---—A02: Lossy
Lossy algorithms allows an approximated reconstruction of data, such that
unnecessary parts of the original data are irreversibly-discarded. It's common
in the media world, where inaudible sounds in audio streams are removed,
negligible differences between pixels in images are blended--just to name a few.

When lossy-compressed media streams are perceptually-indistinguishable from
their original sources, they are transparent.

Transcoding from a lossy source is a bad practice. For myself, I allow this up
to twice; that is from source, transcoded, then transcoded again and again, the
last of which is reserved for temporary uses.


————A10: Compression Level
For lossy algorithms, the level of compression affects their granularity of
approximation. Some data can be well-reconstructed with a higher level of
approximation than others. For example, an image of a solid color can be
well-reconstructed with little data, but the same amount can not reconstruct an
image of a 17th century Flemish engraving at any passing accuracy. Therefore,
the optimal compression level depends on the input.

For both lossless and lossy algorithms, the level of compression affects the
encoding time and efficiency.


————A20: Rate Control
In the lossy compression of audio or video streams, bitrate--the number of bits
per time unit--is a parameter that determines the compression level. There are
two methods of controlling the bitrate: constant and variable.

---—A21: Constant Bitrate
Constant bitrate allocates the same number of bits to each time unit, such that
the bitrate remains constant throughout the stream. The level of compression and
thus approximation for a unit may differ from another, and bit stuffing may be
done to reach the desired bitrate.

Constant bitrate is designed for fixed-rate transfers and playback, and the size
of the output stream can be calculated by multiplying the bitrate by the
duration of the input stream.

---—A22: Variable Bitrate
Variable bitrate allocates a different number of bits to each time unit, such
that the bitrate varies throughout the stream. The level of compression is
dynamically-adjusted to achieve some consistency in the level of approximation.

The variation of bitrate can be further-defined with at least two options:
constant quality maintains the level of approximation throughout the stream.
Average bitrate maintains the average bitrate of the stream. The latter can be
used to limit the file size to a target based on the bitrate, though it's not an
equal substitute to constant bitrate.


——B00: Audio Compression
With typical storage capacities today, storing lossless-compressed audio streams
doesn't seem as big as it was, and everyone should be familiar with FLAC. This
section is mainly for those who want to place gazillions of songs into a tiny
card or optical disc for casual outdoor listening, or to transfer them over the
Internet for playback. If you're at home, a friend's house, or at work, you're
better off listening to your CDs, tapes, or lossless copies of them.

I'm covering mainly 2-channel, 44.1 kHz or CD-quality audio.


————B10: Opus
Opus has superseded Vorbis and its competing formats. It incorporates
technologies from Skype's SILK and Xiph.Org's CELT to provide an open,
multi-purpose, low-latency audio format. It has since gained widespread support,
especially in the second half of the 2010s.

Here are my starting recommendations for Opus:

       Encoder:   libopus
  Rate Control:   Variable Bitrate
       Bitrate:   80 kbps

Transparency can be achieved with at least 160 kbps, though you may be happy
with 128 kbps.


————B20: Vorbis
Vorbis began as a project to develop an open, royalty-free alternative to
MPEG-1/2 Audio Layer III (MP3). The result is an audio compression format with
fidelity higher than that of MP3, especially at low bitrates. Today, most
software support playback for Vorbis.

Here are my starting recommendations for Vorbis:

       Encoder:   Aoyumi's Tuned Vorbis (aoTuV)
  Rate Control:   Constant Quality
       Quality:   2

Transparency can be achieved with at least quality 5. The default is quality 3.

Many programs use the libvorbis encoder. aoTuV is a modification of it that may
output slightly-better and -larger streams.

My old music library was built under the above recommendations except for my use
of the libvorbis encoder.


————B30: Advanced Audio Coding (AAC)
AAC was collaboratively-developed as a successor to MP3. This is the choice of
many for its universal compatibility.

AAC encoding methods are organized into Object Types, of those I recommend
either Low Complexity (LC) or High Efficiency (HE) for music. Many portable
media players (in the past?) support only AAC-LC.

Here is a list of AAC encoders sorted by Hydrogenaudio recommendations:

  Encoder            | Comment
  ----------------------------
  Apple AAC            Shipped with Apple software.
  FhG AAC              Winamp.
  Fraunhofer FDK AAC   Cross-platform.
  Nero AAC             No longer being developed.
  FFmpeg               AAC-LC only. Cross-platform.
  FAAC                 AAC-LC only. Cross-platform.
  Libav                Experimental.

  [ https://wiki.hydrogenaud.io/index.php?title=AAC_encoders ]

It's crucial to know which encoder your program uses. If you're using Apple
software, then you're good to go. Otherwise, many should be using at least
FFmpeg's encoder, and may have the option to use Fraunhofer FDK AAC instead.

Here are my starting recommendations for AAC:

   Object Type:   LC
       Encoder:   Fraunhofer FDK AAC
  Rate Control:   Constant Bitrate
       Bitrate:   112 kbps

FDK AAC lacks a variable bitrate mode that averages at around the above bitrate.
The closest one is 4 which averages at around 128 kbps. Transparency can be
achieved with at least 160 kbps.

For YouTube, here are Google's recommendations for AAC:

  Channels   | Bitrate (kbps)
  ---------------------------
  1 (Mono)     128
  2 (Stereo)   384
  5.1          512

  [ https://support.google.com/youtube/answer/1722171 ]


————B40: MPEG-1/2 Audio Layer III (MP3)
Despite the superiority of its successor: AAC, it remains popular in
colloquialism and Internet music distribution.

Here are my starting recommendations for MP3:

       Encoder:   LAME
  Rate Control:   Variable Bitrate
       Quality:   5

Transparency can be achieved with quality 2 or lower. For the bedrock of all
hardware players, you may have to use constant bitrate:

  Rate Control:   Constant Bitrate
       Bitrate:   160 kbps

For maximum quality, use the following parameters:

  Rate Control:   Variable Bitrate
       Quality:   0

This returns similar results to constant 320 kbps for smaller file sizes.


————B50: Windows Media Audio (WMA)
WMA is Microsoft's take on the audio compression bandwagon from the late 1990s
to compete with MP3. Initially boastful for reaching "near CD-quality" at 64
kbps, it was supported on some portable, car, and home audio equipment. With the
lack of cross-platform availability, there's virtually no reason to use WMA
today.

There are several versions of WMA, including Professional, Lossless, and Voice.

My software infrastructure is no longer on Windows, and FFmpeg's encoder is a
far cry from Microsoft's, leaving me no other way than to recommend from memory:

        Format:   WMA2
       Encoder:   Microsoft
  Rate Control:   Constant Bitrate
       Bitrate:   128 kbps

Microsoft used 160 kbps for the sample music that came with Windows Vista. There
may be an option for variable bitrate.


————B60: Adaptive Transform Acoustic Coding (ATRAC)
ATRAC is Sony's foray into lossy audio compression from the early 1990s to
compete in the theaters and the like. It was used in the MiniDisc (MD), and was
later supported on non-MD hardware to compete with MP3. Eventually, they gave
up: first by adding support for MP3 onto their Network Walkmen, then by
discontinuing the format at around the turn of the decade. Like WMA, ATRAC lacks
cross-platform availability, and is unsupported even on modern Sony players.

Versions include ATRAC, ATRAC3, ATRAC3plus, and ATRAC Advanced Lossless. ATRAC
2, 3, 3.5, 4, 4.5, etc. are implementations of ATRAC, while ATRAC3 is an
incompatible upgrade to ATRAC.

At its current status, I recommend ATRAC only to players it's used in:

            MiniDisc | ATRAC CD
            -------------------
   Format:  ATRAC      ATRAC3plus
  Encoder:  Sony       Sony
  Bitrate:  132 kbps   256 kbps

These are the highest bitrates available to my players.

ATRAC3 is accessible via MiniDisc Long Play (MDLP) at up to 64 kbps. Why Sony
didn't offer ATRAC3 at 132 kbps for MD is beyond me. ATRAC3plus at 256 kbps can
fit over five hours into a CD. It may work on players that supposedly don't play
ATRAC3plus at this bitrate.


————B70: Audio Recording
I advise you to record losslessly. That means to match the input device's
sampling rate and bitdepth, and save your recordings in a lossless format like
FLAC. That way, your recordings would be virtually future-proof, as they're made
at the best quality possible. If uncertain, use 16-bit at 44100 Hz.


——C00: Video Compression
Videos come in all shapes and sizes, and are rarely distributed in lossless
formats. This section is not only for those who want to distribute them over the
Internet for playback, but also those who want to achieve transparency for
second-rate archiving.

All parameters are designed for use with FFmpeg.


————C10: Advanced Video Coding (AVC/H.264)
This is the choice of many. There are countless devices that can both encode and
decode H.264 videos at the hardware level.

Here are my starting recommendations for H.264:

       Encoder:   x264 (libx264)
  Rate Control:   Constant Rate Factor (CRF)
           CRF:   23
        Preset:   slow

Transparency can be achieved with CRF 18 or lower. A faster preset decreases the
encoding time and quality, use them only for real-time recording if a hardware
encoder is inaccessible. You may also need to lower the CRF to compensate over
the quality loss. The default is CRF 23, medium preset.

If you're using 10-bit x264, then maybe multiply the CRFs by `64 / 52` to
transpose them to its larger scale. x264 has a lossless mode accessible with CRF
0.

For YouTube, here are Google's recommendations for H.264:

             Profile:   High
        Rate Control:   Variable Bitrate
             Bitrate:   <see below>
  Chroma Subsampling:   4:2:0
  - 2 consecutive B frames.
  - Closed GOP. GOP of half the frame rate.
  - CABAC.

And the following bitrate table is for frame rates up to 30 fps:

  Resolution  | Bitrate (Mbps)
  ----------------------------
  2160p (4K)    35-45
  1440p (2K)    16
  1080p (FHD)   8
  720p  (HD)    5
  480p  (SD)    2.5
  360p          1

For frame rates above 30 to 60 fps, multiply the bitrate by 1.5. For example,
for 1080p, it's 8 * 1.5 = 12 Mbps.

For HDR uploads, multiply the bitrate by 1.25. For example, for 1080p60, it's
12 * 1.25 = 15 Mbps. HDR is not supported below 720p.

  [ https://support.google.com/youtube/answer/1722171 ]


————C20: MPEG-4
Superseded by H.264, it remains as a cheap solution but with larger storage
costs. Try it if H.264 is inaccessible.

Here are my starting recommendations for MPEG-4:

       Profile:   Advanced Simple Profile
       Encoder:   Xvid (libxvid)
  Rate Control:   Constant Quantizer
     Quantizer:   4

Transparency can be achieved with quantizer 2 or lower.


————C30: Theora
Theora derived from On2's VP3 to develop an open, royalty-free video format
comparable to MPEG-4.

Theora videos are usually encoded at a variable frame rate, so they may freeze
during scenes with no motion.

Here are my starting recommendations for Theora:

       Encoder:   libtheora
  Rate Control:   Constant Quantizer
     Quantizer:   7.5

Transparency can be achieved with the maximum quality of 10.


————C40: VP8
VP8 is another video format from On2 that has since been acquired by Google,
then freed as part of their WebM project. It's a royalty-free equivalent of
H.264.

Here are my starting recommendations for VP8:

           Encoder:   libvpx
      Rate Control:   Constrained Quality
           Quality:   30
  Encoding Quality:   Good
          CPU Used:   0

Transparency can be achieved with quality 8 or lower, which outputs much larger
streams than x264 achieving transparency with CRF 18 or lower. The default is
quality 10.

----Original Recommendations for VP8
These are some of the earliest building blocks of this manual, staying here for
legacy reasons. Try them for smaller-sized, lower-quality videos:

  Rate Control:   Variable Bitrate
       Bitrate:   <see below>

The bitrate can be calculated with the following block of conditions:

1   Base bitrate
  a   If the aspect ratio is 16:9 (or wide), then use 4/3 the width.
  b   If the aspect ratio is 4:3 (or not wide), then use the width.

2   Motion bitrate
  a   If the frame rate is 48 or above, then use 4/3 the base bitrate.
  b   If the frame rate is 15 or below, then use 2/3 the base bitrate.
  c   Otherwise, use the base bitrate as is.

3   Application bitrate
  a   For emphasis on quality, use 3/2 the motion bitrate.
  b   Otherwise, use the motion bitrate as is.

And the application bitrate is the final bitrate in kbps.


————C50: H.265, VP9, and AV1
I'm aware of successors H.265, VP9, and AV1. Try them if your hardware has the
processing power that matches your patience--mine doesn't.


————C60: Chroma Subsampling
The human eye has less spatial color resolution than that for luminosity. So,
color information are usually encoded at a lower resolution. This is referred to
as chroma subsampling. Common values include:

  Subsampling | Description
  -------------------------
  4:4:4         No subsampling
  4:2:2         Halved
  4:2:0         Quartered

For myself, I use the same setting as that for the source; if the source is
4:2:0 subsampled, then I use 4:2:0. MiniDV uses 4:1:1, which is rather uncommon.
If 4:1:1 is not possible, then I recommend that you use either 4:4:4 or 4:2:2,
so long as the chroma subsampling is more-or-less unaffected.


————C70: Video Recording
Unlike audio, lossless recording of videos is largely inaccessible due to its
storage space requirements. The next best solution is to record in a lossy
format with transparency, for which I recommend using either your hardware H.264
encoder, x264 (section C10), or Xvid (section C20).


——D00: Image Compression
Image compression works similarly to that for videos, except on a single frame
only. For most digital cameras, the default compression settings should be fine.


————D10: When To Use Lossy Compression?
It occurred to me some Photoshop people don't follow good exporting practices.
This section is written specifically for anyone under this field.

In most cases, a lossless export is recommended. A lossy export is suitable if
you'd like to:

1   Adhere within upload limits. Lossy compression is not the only solution, see
    section E20.

2   Distribute for viewing purposes only. Be sure to keep a lossless copy
    elsewhere for other uses.

(In)conveniently, most websites convert your image uploads to JPEG for web
viewing. Hence, attempt lossless uploads to preserve as much detail as possible.

Converting a lossy-compressed image to a lossless format, without anything in
the middle, is a waste of resources.


————D20: JPEG
JPEG is a lossy image compression format that is popular in colloquialism as
"J peg." JPEG is an acronym for Joint Photographic Experts Group.

I have no specific recommendations for JPEG as each software uses its own scale.
Usually, the defaults should be fine, but try the most expensive ones (requires
most computational resources) to improve efficiency. So far from what I've seen
in terms of default quality, the highest percentile is 90 while the lowest is
80.


————D30: Portable Network Graphics (PNG)
PNG is a lossless image compression format with support for transparency, and
later animation with APNG.

My only recommendation for PNG is to use the highest level of compression.

There are some smartphone programs--or apps--that let you take PNG pictures, but
keep in mind that doing so takes much longer than with JPEG. Hence, it's ideal
only for photography-exclusive sessions. Don't forget to transfer the PNGs
afterwards as they take a lot of storage space. One such program for Android is
OpenCamera.


————D40: Graphics Interchange Format (GIF)
GIF, infamous for its support for meme-quality animation, also supports atomic
transparency. It can store only 256 (8-bit) distinct colors. Because of its
now-inferior compression ratios, some vendors convert them to videos to save
storage space.

I have no recommendations for GIF.


————D50: WebP
WebP is a multi-purpose image compression format developed by Google based on
VP8. It can do both lossy and lossless compression, supports both transparency
and animation, all for reportedly smaller file sizes.

I'm yet to play around WebP.


——E00: Media Manipulation
Sometimes, media compression alone isn't enough. You can further reduce the size
by manipulating the media itself.


————E10: Audio Manipulation

---—E11: Sampling Rate
Before anything, inspect your spectrograms.

Human speech becomes intelligible at 8 kHz (telephone), and music becomes
enjoyable at 32 kHz (FM radio). Full-fidelity audio is rated at 44.1 or 48 kHz.
192 kHz adds no benefit to humans. I personally use 22.05 kHz for regular AM
radio and microcassette recordings, 44.1 or 48 kHz otherwise.

---—E12: Bitdepth
24 bits adds no practical benefit to 16 bits, especially if you take dithering
into account. The common quiet listening environments don't allow the enjoyment
of the theoretical ~96 dB dynamic range of 16-bit audio; it takes a room of
near-complete true-silence. Also, try A- or µ-law first for 8-bit encoding.

---—E13: Channels
Human speech doesn't need to be stereophonic or beyond, unless positional
information is important. If the source audio is monaural, then encode it as
such. Multi-channel audio can be downmixed into stereo with Dolby Pro Logic or
the like, but with some loss in quality.


————E20: Image Manipulation

---—E21: Colors
An important factor to image encoding is the color space. It's like defining the
set of colored pencils used recreate an image. Use the smallest color space
tolerable. A solid-color image should be encoded with only 1 color--or as little
as your image processor allows--instead of the usual 24-bit (16777216) colors.
Dithering gives the illusion of having more colors than the ones encoded by
blending two colors together. Programs such as pngquant can do all of these for
you.

---—E22: Resolution
Usually, hand-drawn diagrams don't need to be captured in HD. This ultimately
depends on the page size and stroke thickness. Smaller pages and/or thicker
strokes require less resolution.

Some cameras needlessly upscale their images, such that downscaling them brings
virtually no difference. I personally downscale my stupidphone images before
sending them off to others over the Internet.


————E30: Video Manipulation
Videos are composed of images playing at a certain frame rate accompanied with
audio. So most of the above still apply.

If you compose a video, use simple transitions, avoid as much motion as
possible, and don't use particle effects. Noise reduction ("denoise") can
improve video compressibility by a notch, as Zoom does to your video feeds.
Sometimes, even still shots can be noisy. So if you're sane, mask whatever's
supposed to be still with an image. You can see an example in
[ https://www.youtube.com/watch?v=Occ52IZVOh4 ] in which the surrounding portion
of its frames is completely static.


——CRD: Credits
I'd like to thank the contributors of both the Hydrogenaudio Knowledgebase and
the FFmpeg Wiki. Parts of this manual were based on my readings of those
websites.


——LCN: License
Most of this work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
[ http://creativecommons.org/licenses/by-nc-sa/4.0 ] or send a letter to
Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

Parts adapted from the Hydrogenaudio Knowledgebase are licensed under the GNU
Free Documentation License 1.2.


——
End of MENCMAN.TXT
